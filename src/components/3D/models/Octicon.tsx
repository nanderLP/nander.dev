/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Curve: THREE.Mesh;
  };
  materials: {
    SVGMat: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const ref = useRef<THREE.Mesh>(null!);

  const { nodes, materials } = useGLTF(
    "/models/octicon.gltf"
  ) as unknown as GLTFResult;

  useFrame((state, delta) => {
    ref.current.rotation.x += 0.001;
    ref.current.rotation.y += 0.001;
    ref.current.rotation.z += 0.001;
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        ref={ref}
        geometry={nodes.Curve.geometry}
        material={materials.SVGMat}
        scale={[10, 2, 10]}
      >
        <meshBasicMaterial />
      </mesh>
    </group>
  );
}

useGLTF.preload("/models/octicon.gltf");
